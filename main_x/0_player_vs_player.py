def rules():
    print("""
Перед вами игра "крестики-нолики".
Игроки по очереди ставят данные символы на свободные клетки ячейки 3×3. 
Победителем считается тот, кто первым выстроит непрерывный ряд
из крестиков или ноликов в любом направлении: по вертикали, горизонтали, диагонали.
Цифры в полях указывают на ячейку от 1 до 9, куда нужно ставить символ.
-------------
| 1 | 2 | 3 |
-------------
| 4 | 5 | 6 |
-------------
| 7 | 8 | 9 |
-------------

""")


play_field = list(range(1, 10))  # игровое поле с заданным  колличеством ячеек....

def print_play_field(play_field3):  # функция печати игрового поля

    """
    :param play_field3: принимает ячейки поля
    :return: возвращает поле с ячейками 3х3.
    """

    for i in range(3):  # с помощью цикала печатает игровое поле
        print("|", play_field[0 + i * 3], "|", play_field[1 + i * 3], "|", play_field[2 + i * 3], "|")
        print("-------------")


def assign_symbol(symbol):      # присвоение символа игроку
    """
    :param symbol: принимает выбранный символ игрока
    :return: возвращает результат проверки доступности ячейки и числа выходят из диапозона 1-9
    """
    assign = False
    while not assign:
        symb = input("Выберите ячейку: " + symbol + "!")  # Срашиваем куда пользователь хочет поставить свой символ
        symb = int(symb)  # input принимает строку, а нам нужен int
        if symb >= 1 and symb <= 9:  # проверка границы введенного числа
            if (str(play_field[symb - 1]) not in "XO"):  # еще одна проверка нахождения в строке
                play_field[symb - 1] = symbol  # если ячейка пустая, то передаем значение в агрумент
                assign = True
            else:
                print("Ячека занята. Напишите другой номер от 1 до 9: ")   # ячейка не доступна , занята другим игроком, вывод сообщения...
        else:
            print("Такой ячейки существует! Напишите другой номер от 1 до 9: ")   # выбранное число выходит из диапазона  1-9, вывод сообщения...


win_coord = ((0, 1, 2),  # варианты выйгрышных комбинаций
             (3, 4, 5),
             (6, 7, 8),
             (0, 3, 6),
             (1, 4, 7),
             (2, 5, 8),
             (0, 4, 8),
             (2, 4, 6)
             )


def check_win_coord(play_field):  # проверка выйгрышных комбинаций
    """
    :param play_field: принимает игровое поле
    :return:  при удачной проверке вернет символ
    """
    for i in win_coord:
        if play_field[i[0]] == play_field[i[1]] == play_field[i[2]]:
            return play_field[i[0]]
    return False


def main(play_field):  # общая функция
    """
    :return: принимает игровое поле
    :return: возвращает результат игры
    """
    rules()
    counter = 0  # счетчик для ходов
    win = False
    while not win:
        print_play_field(play_field)
        if counter % 2 == 0:
            assign_symbol("X")
        else:
            assign_symbol("O")
        counter += 1
        result = check_win_coord(play_field)
        if result:
            print("Линия собрана! Игрок, который играл за " + result + " выиграл!")
            win = True
            break
        if counter == 9:
            print("Ничья!!!")
            break
    print_play_field(play_field)


main(play_field)